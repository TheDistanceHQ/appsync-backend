Resources:
  AppsyncapiGraphQlDsusersTable:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: UsersTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: { Fn::GetAtt: [AppsyncDynamoDBRole, Arn] }
      DynamoDBConfig:
        AwsRegion: ${self:custom.region}
        TableName: !Ref Users
  AppsyncapiGraphQlDsgetImageUploadUrlFunction:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: ImageUpload
      Type: AWS_LAMBDA
      ServiceRoleArn: { Fn::GetAtt: [AppsyncLambdaInvokeRole, Arn] }
      LambdaConfig:
        LambdaFunctionArn: { Fn::GetAtt: [GetImageUploadUrlLambdaFunction, Arn] }
  AppsyncapiGraphQlDstweetFunction:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: Tweet
      Type: AWS_LAMBDA
      ServiceRoleArn: { Fn::GetAtt: [AppsyncLambdaInvokeRole, Arn] }
      LambdaConfig:
        LambdaFunctionArn: { Fn::GetAtt: [TweetLambdaFunction, Arn] }
  AppsyncapiGraphQlDstweetsTable:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: TweetsTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: { Fn::GetAtt: [AppsyncDynamoDBRole, Arn] }
      DynamoDBConfig:
        AwsRegion: ${self:custom.region}
        TableName: !Ref Tweets
  AppsyncapiGraphQlDstimelinesTable:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: TimelinesTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: { Fn::GetAtt: [AppsyncDynamoDBRole, Arn] }
      DynamoDBConfig:
        AwsRegion: ${self:custom.region}
        TableName: !Ref Timelines
  AppsyncapiGraphQlDslikesTable:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: LikesTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: { Fn::GetAtt: [AppsyncDynamoDBRole, Arn] }
      DynamoDBConfig:
        AwsRegion: ${self:custom.region}
        TableName: !Ref Likes
  AppsyncapiGraphQlDsretweetFunction:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: Retweet
      Type: AWS_LAMBDA
      ServiceRoleArn: { Fn::GetAtt: [AppsyncLambdaInvokeRole, Arn] }
      LambdaConfig:
        LambdaFunctionArn: { Fn::GetAtt: [RetweetLambdaFunction, Arn] }
  AppsyncapiGraphQlDsunretweetFunction:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: Unretweet
      Type: AWS_LAMBDA
      ServiceRoleArn: { Fn::GetAtt: [AppsyncLambdaInvokeRole, Arn] }
      LambdaConfig:
        LambdaFunctionArn: { Fn::GetAtt: [UnretweetLambdaFunction, Arn] }
  AppsyncapiGraphQlDsreplyFunction:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: Reply
      Type: AWS_LAMBDA
      ServiceRoleArn: { Fn::GetAtt: [AppsyncLambdaInvokeRole, Arn] }
      LambdaConfig:
        LambdaFunctionArn: { Fn::GetAtt: [ReplyLambdaFunction, Arn] }
  AppsyncapiGraphQlDsrelationshipsTable:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
      Name: RelationshipsTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: { Fn::GetAtt: [AppsyncDynamoDBRole, Arn] }
      DynamoDBConfig:
        AwsRegion: ${self:custom.region}
        TableName: !Ref Relationships