service: appsync-backend
frameworkVersion: '3'
plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: 'dev'
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  appSync:
    - ${file(appsync-api.yml)}
functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref Users
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt Users.Arn

resources:
  Resources: 
    AppsyncDynamoDBRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: appsync-backend-app-dynamodb-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "AppSyncBackendRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:GetItem"
                    - "dynamodb:Scan"
                    - "dynamodb:PutItem"
                  Resource:
                    - { Fn::GetAtt: [ Users, Arn ] }
    Users:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: users-table
    AppsyncBackendUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn
    UserPoolInvokeConfirmSignupLambda:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt AppsyncBackendUserPool.Arn
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref AppsyncBackendUserPool
        ClientName: appsync-backend-client
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    AppsyncapiGraphQlDsusersTable:
      Type: "AWS::AppSync::DataSource"
      Properties:
        ApiId: !GetAtt AppsyncapiGraphQlApi.ApiId
        Name: UsersTable
        Type: AMAZON_DYNAMODB
        ServiceRoleArn: { Fn::GetAtt: [AppsyncDynamoDBRole, Arn] }
        DynamoDBConfig:
          AwsRegion: ${self:custom.region}
          TableName: !Ref Users
  Outputs:
    AWSRegion:
      Value: ${self:custom.region}
    CognitoUserPoolId:
      Value: !Ref AppsyncBackendUserPool
    WebCognitoUserPoolClientId:
      Value: !Ref WebUserPoolClient
package:
  exclude:
    - package-lock.json
    - package.json
