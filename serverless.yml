service: appsync-backend
frameworkVersion: '3'
plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-webpack
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: 'dev'
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  appSync:
    - ${file(serverless/custom/appsync-api.yml)}
functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref Users
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt Users.Arn
  getImageUploadUrl:
    handler: functions/get-upload-url.handler
    environment:
      BUCKET_NAME: !Ref AssetBucket
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - S3:PutObject
          - S3:PutObjectAcl
        Resource: !Sub ${AssetBucket.Arn}/*
  retweet:
    handler: functions/retweets.handler
    environment:
      USERS_TABLE: !Ref Users
      TWEETS_TABLE: !Ref Tweets
      TIMELINES_TABLE: !Ref Timelines
      RETWEETS_TABLE: !Ref Retweets
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: 
          - !GetAtt Users.Arn
          - !GetAtt Tweets.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt Tweets.Arn
          - !GetAtt Retweets.Arn
          - !GetAtt Timelines.Arn
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt Tweets.Arn
  unretweet:
    handler: functions/unretweet.handler
    environment:
      USERS_TABLE: !Ref Users
      TWEETS_TABLE: !Ref Tweets
      TIMELINES_TABLE: !Ref Timelines
      RETWEETS_TABLE: !Ref Retweets
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: 
          - !GetAtt Users.Arn
          - !GetAtt Tweets.Arn
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource:
          - !GetAtt Tweets.Arn
          - !GetAtt Retweets.Arn
          - !GetAtt Timelines.Arn
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt Tweets.Arn
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !Sub ${Tweets.Arn}/*
  tweet:
    handler: functions/tweets.handler
    environment:
      USERS_TABLE: !Ref Users
      TWEETS_TABLE: !Ref Tweets
      TIMELINES_TABLE: !Ref Timelines
      RETWEETS_TABLE: !Ref Retweets
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: !GetAtt Users.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt Tweets.Arn
          - !GetAtt Timelines.Arn
resources:
  # Dynamo tables
  - ${file(serverless/resources/dynamo-tables.yml)}
  # Cognito
  - ${file(serverless/resources/cognito.yml)}
  # Service roles
  - ${file(serverless/resources/service-roles.yml)}
  # Appsync datasources
  - ${file(serverless/resources/appsync-datasources.yml)}
  # S3 bucket
  - ${file(serverless/resources/s3.yml)}
package:
  exclude:
    - package-lock.json
    - package.json
